parameters:

- name: vmName
  type: string

- name: serviceAccountUE
  type: string

- name: serviceAccountP
  type: string

- name: commRG
  type: string

- name: destStorageAccountName
  type: string

- name: rootContainerName
  type: string

- name: sftpUserName
  type: string

- name: keyVaultNameforSecret
  type: string

- name: ClientID
  type: string

- name: ClientSecret
  type: string

- name: TenantDomain
  type: string

- name: fromEmailAddress
  type: string

- name: emailAddress
  type: string

- name: clientEmailAddress
  type: string

- name: dmTaskNumber
  type: string

- name: ipTobeWhiteListed
  type: string

- name: destSftpSshKeySecret
  type: string

- name: subId
  type: string

- name: tenantId
  type: string

- name: ExternalHighPortForSFTP
  type: string

- name: externalIP
  type: string

- name: connRg
  type: string

- name: connSubId
  type: string

- name: runType
  type: string

- name: appName
  type: string

- name: serviceConnection
  type: string

steps:
  - task: PowerShell@2
    name: AddLocalUserPS
    inputs:
      targetType: 'inline'
      script: |
                   # for original below line should be uncommented
                   $computervm = '${{ parameters.vmName }}'
                   # $computervm = 'VMnpedcdm8663'
                   echo '******************************************************************'
                   echo 'Add Local User, existing Public Key, password to Storage Account'
                   echo '******************************************************************'
                   ls $(System.DefaultWorkingDirectory)\CFS.Core.BKOF\scripts\*
                   echo '******************************************************************'
                   $User = '${{ parameters.serviceAccountUE }}'
                   $Password = ConvertTo-SecureString -String '${{ parameters.serviceAccountP }}' -AsPlainText -Force
                   $Credential = [pscredential]::new($User,$Password)
                   $ToSession = New-PSSession -ComputerName "$computervm" -Credential $Credential
                   echo '***************************************************************************'
                   echo 'serviceAccountUserEmail:  ${{ parameters.serviceAccountUE }}'
                   echo 'ServiceAccountPassword: ${{ parameters.serviceAccountP }}'
                   echo 'User: ' $User
                   echo 'Password: ' $Password
                   echo 'Computervm: ' $computervm
                   echo 'Credential: ' $Credential
                   echo 'Session: ' $ToSession
                   echo 'commRG: ${{ parameters.commRG }}'
                   echo 'Destination Storage Account: ${{ parameters.destStorageAccountName }}'
                   echo 'Root Container name: ${{ parameters.rootContainerName }}'
                   echo 'sftpUserName: ${{ parameters.sftpUserName }}'
                   echo 'keyVaultNameforSecret: ' ${{ parameters.keyVaultNameforSecret }}'
                   echo 'ClientID: ' ${{ parameters.ClientID }}'
                   echo 'ClientSecret: ${{ parameters.ClientSecret }}'
                   echo 'TenantDomain: ${{ parameters.TenantDomain }}'
                   echo 'FromEmailAddress: ${{ parameters.fromEmailAddress }}'
                   echo 'EmailAddress: ${{ parameters.emailAddress }}'
                   echo 'TaskNumber: ${{ parameters.dmTaskNumber }}'
                   $sftpUsername ='${{ parameters.sftpUserName }}'
                   echo 'Before sftpUserName: ' $sftpUsername
                   $sftpUsername = ($sftpUsername).Replace("-","")
                   $sftpUsername = ($sftpUsername).Replace("_","")
                   $sftpUsername = $sftpUsername.ToLower()
                   echo 'Modified sftpUserName: ' $sftpUsername
                   echo '***************************************************************************'
                   # $returnValues=Invoke-Command -Session $ToSession -FilePath "$(System.DefaultWorkingDirectory)\CFS.Core.BKOF\scripts\AddLocalUserinSftp.ps1" -ArgumentList  "${{ parameters.commRG }}","${{ parameters.destStorageAccountName }}","${{ parameters.rootContainerName }}","${{ parameters.sftpUserName }}","${{ parameters.keyVaultNameforSecret }}","${{ parameters.destSftpSshKeySecret }}","${{ parameters.tenantId}}","${{ parameters.subId}}"
                   $returnValues=Invoke-Command -Session $ToSession -FilePath "$(System.DefaultWorkingDirectory)\CFS.Core.BKOF\scripts\AddLocalUserinSftp.ps1" -ArgumentList  "${{ parameters.commRG }}","${{ parameters.destStorageAccountName }}","${{ parameters.rootContainerName }}","$sftpUserName","${{ parameters.keyVaultNameforSecret }}","${{ parameters.destSftpSshKeySecret }}","${{ parameters.tenantId}}","${{ parameters.subId}}"
                   if ($returnValues -contains "Failed. Unable to*"){
                    Write-Output $returnValues
                    Write-Error "Error encountered executing script."
                   }
                   else{
                   $jsonprint = ($returnValues | ConvertTo-Json)
                   Write-Output $jsonprint
                   $returnValuesJson = ($returnValues | ConvertTo-Json) | ConvertFrom-Json
                   $sshPwd1 = $returnValuesJson | Where-Object {![string]::IsNullOrEmpty($_.SshPassword)}
                   $sshPwd = $sshPwd1.SshPassword
                   Write-Output "##vso[task.setvariable variable=localUserPassword]$sshPwd"
                   Write-Output "##vso[task.setvariable variable=sftpUser]$sftpUsername"
                   }

  - task: AzureCLI@2
    displayName : Fetch private IP Address
    inputs:
      azureSubscription: ${{ parameters.serviceConnection }}
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
                   $conRgName = '${{ parameters.connRg }}'
                   $connSubId = '${{ parameters.connSubId }}'
                   $dnsZoneGrp = 'privatelink.blob.core.windows.net'
                   $storage = '${{ parameters.destStorageAccountName }}'
                   az account set --subscription $connSubId
                   $privateIp = az network private-dns record-set a show --resource-group $conRgName --zone-name $dnsZoneGrp --name $storage --query aRecords[0].ipv4Address --output tsv
                   Write-Output "##vso[task.setvariable variable=internalPrivateIp]$privateIp"

  # - task: PowerShell@2
  #   inputs:
  #     targetType: 'inline'
  #     script: |
  #       Write-Output $(localUserPassword)
  #       Write-Output $(internalPrivateIp)

  - task: GraphEmail@0
    displayName: 'Sending sFtp Username'
    inputs:
      To: '${{ parameters.emailAddress }}' # The Business User who will receive the email
      From: '${{ parameters.fromEmailAddress }}'
      Subject: '${{ parameters.appName }} SFTP credentials and connectivity information to retrieve data for taskNumber ${{ parameters.dmTaskNumber }}' # Email Subject
      Body: "<p>This email contains the key information to allow the ${{ parameters.appName }} team to connect to DMT MLZ SFTP server. In order for the connectivity to work the appropiate Firewall Rule changes are required to enable such connectivity. To complete, a new SR is required to enable the key items described below.</p><p>Username for sFTP is: ${{ parameters.destStorageAccountName }}.$(sftpUser)</p><p>Hostname is: ${{ parameters.externalIP }}</p><p>Port number: ${{ parameters.ExternalHighPortForSFTP }}</p><p>Ssh Password will be sent in seperate email. Please save these credentials for future.</p><p>${{ parameters.appName }} IP to whitelist at Fortigate = $(ipTobeWhiteListed)</p><p>New NAT Firewall Rule to be logged to allow connectivity to new storage account hosting SFTP</p><p>From = $(externalIP)</p><p>Port = ${{ parameters.ExternalHighPortForSFTP }}</p><p>To = $(internalPrivateIp)</p><p>Port = 22</p><p>Vendor IP whitelisting = ${{ parameters.ipTobeWhiteListed }} - This IP/'s needs to be a whitelisted at Fortigate Firewall to allow access.</p><p>This task is for ${{ parameters.appName }}.</p>" # Email Body
      BodyAsHtml: true
      ShowClientSecret: false
      ClientID: '${{ parameters.ClientID }}'
      ClientSecret: '${{ parameters.ClientSecret }}'
      TenantDomain: '${{ parameters.TenantDomain }}'

  - task: GraphEmail@0
    displayName: 'Sending sFtp Password'
    inputs:
      To: '${{ parameters.clientEmailAddress }}' # The Client person who will receive the email
      From: '${{ parameters.fromEmailAddress }}'
      Subject: '${{ parameters.appName }} SFTP password for Tasknumber ${{ parameters.dmTaskNumber }}' # Email Subject
      Body: "Password for sFTP is: $(localUserPassword) <p>Please save these credentials for future.</p><p>This task is for ${{ parameters.appName }}</p><p>This mailbox is not monitored, please direct all requests to ${{ parameters.emailAddress }}</p>"  # Email Body
      BodyAsHtml: true
      ShowClientSecret: false
      ClientID: '${{ parameters.ClientID }}'
      ClientSecret: '${{ parameters.ClientSecret }}'
      TenantDomain: '${{ parameters.TenantDomain }}'