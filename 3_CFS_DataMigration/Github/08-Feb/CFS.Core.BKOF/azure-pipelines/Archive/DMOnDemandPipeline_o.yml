trigger: none # will disable CI builds entirely

pr: none # will disable PR builds entirely; will not disable CI triggers

parameters:
  - name: deployEnvironment
    displayName: Target Deployment Environment
    type: string
    default: "Non-Production"
    values:
     - "Non-Production"
     - "Production"

  - name: taskNumber
    displayName: Task Number 
    type: string   
    default: "WK-123456"

  - name: targetDataType 
    displayName: Target Deployment Environment
    type: string 
    default: "internal" 
    values:
     - "internal"
     - "external"    

  - name: resourceLocation
    displayName: Location of the resources (australiaeast or australiasoutheast)
    type: string
    default: "australiaeast"
  
  - name: appName
    displayName: appName (Tags - e.g. infra/onyx)
    type: string
    default: "infra"

  - name: costCenterCode
    displayName: costCenterCode (Tags - e.g. 4010)
    type: string
    default: "4010"

  - name: owner
    displayName: owner (Tags - e.g. "Robert Reakes")
    type: string
    default: "Robert Reakes"

  - name: fileSize
    displayName: size of File to be migrated in TB (int) (e.g. if 50 GB, it should be 0.05 )
    type: number
    default: 2

  - name: numberOfFiles
    displayName: Number of File to be migrated (int) (e.g. if 1 or 2 or 10)
    type: number
    default: 1

  - name: sourceDataType
    displayName: From where input file is coming (e.g. sftp or databox)
    type: string
    default: "sftp"

  - name: sourceLocation
    displayName: Location of Source file (e.g. uri of sFtp container, only applicable if sourceDataType is sFtp)
    type: string
    default: "sftp"

  - name: ipTobeWhiteListed
    displayName: IP to be whitelisted for external users should be comma seperated for multiple (e.g. 1.157.208.55,20.28.179.29)
    type: string
    default: "1.157.208.55,20.28.179.29"

  - name: vendorName
    displayName: Name of third party sFtp Vendor 
    type: string
    default: "TCS"

  - name: emailAddress
    displayName: CFS App Contact Email Address 
    type: string
    default: "achroo.batta@my.cfs.com.au"

  - name: secretName
    displayName: Name of the secret which contains password for encrypted source file 
    type: string
    default: "EncryptionPassword"

  - name: keyVaultNameforSecret
    displayName: Name of the keyVault where secret is stored
    type: string
    default: "kv-np-edc-bkof-001"

  - name: warrantyPeriod
    displayName: Date by which Data needs to be deleted (int) (in months, 1 to 6)
    type: number
    default: 1

variables:

 - group: var-azure-tenant-id
 - group: var-password
 - group: lz-var-service-principle-secrets
 - group: var-domain-join-password
 - group: var-service-principle-secrets 

 - name: resourceLocation
   value: ${{ parameters.resourceLocation }}

 #workspaces are in edc only
 - name: workspaceLocationPrefix
   ${{ if eq(parameters.resourceLocation, 'australiaeast') }}:
    value: "edc"
   ${{ else }}:
    value: "sdc"

#Fetch variables from Variable Group
 - name: appName 
   value: ${{ parameters.appName }}

 - name: owner 
   value: ${{ parameters.owner }}

 - name: costCenterCode
   value: ${{ parameters.costCenterCode }} 

 - name: fileSize
   value: ${{ parameters.fileSize }}

 - name: numberOfFiles
   value: ${{ parameters.numberOfFiles }}
 
 - name: sourceDataType
   value: ${{ parameters.sourceDataType }}
 
 - name: sourceLocation
   value:  ${{ parameters.sourceLocation }}

 - name: ipTobeWhiteListed
   value: ${{ parameters.ipTobeWhiteListed }}

 - name: sftpUserName
   value: ${{ parameters.vendorName }}

 - name: rootContainerName
   value: '${{ parameters.vendorName }}container$(Build.BuildId)'

 - name: sshKeyName 
   value: '${{ parameters.vendorName }}sshKey$(Build.BuildId)'

 - name: landingZoneServiceId
   value: 'BKOF'

 - name: AzureEnvironmentPrefix  
   ${{ if eq(parameters.deployEnvironment, 'Non-Production') }}:
      value: "np" 
   ${{ if eq(parameters.deployEnvironment, 'Production') }}:
      value: "prd"

 - name: destStorageAccountName 
   ${{ if eq(parameters.deployEnvironment, 'Non-Production') }}: 
    value: 'dsftp${AzureEnvironmentPrefix}${workspaceLocationPrefix}bkof$(Build.BuildId)'
   ${{ else }}: 
    value: 'dlgen2${AzureEnvironmentPrefix}${workspaceLocationPrefix}bkof$(Build.BuildId)'

 - name: diagStorageAcctName   
   value: 'dsto$(AzureEnvironmentPrefix)$(workspaceLocationPrefix)bkof$(Build.BuildId)'

 - name: privateEndpointNameForStorage
   value: 'pve-$(resourceLocation)-$(diagStorageAcctName)'  

 - name: emailAddress
   value: ${{ parameters.emailAddress }}
 
 - name: secretName
   value: ${{ parameters.secretName }}

 - name: keyVaultNameforSecret
   value: ${{ parameters.keyVaultNameforSecret }}

 - name: warrantyPeriod
   value: ${{ parameters.warrantyPeriod }}

 - name: isDayLightSavings
   value: false 

 - name: useWhatIfDeploymentType
   value: false

 - name: artifactVersion
   value: "latest"

 - name: azureTenantId
   ${{ if eq(parameters.deployEnvironment, 'Non-Production') }}:
     value: '$(np-azure-tenant-id)'
   ${{ else }}:
     value: '$(prd-azure-tenant-id)'

 - name: agentPool
   ${{ if eq(parameters.deployEnvironment, 'Non-Production') }}:
    value: 'Windows-NP'
   ${{ else }}:
    value: 'Windows-PRD' 

 # Artifact Package Feed Value
 - name: artifactFeed  
   ${{ if and(eq(parameters.deployEnvironment, 'Production'), eq(variables['Build.SourceBranch'], 'refs/heads/main') ) }}:  
    value: "core-it/cfs-infra-release"   
   ${{ elseif and( eq(parameters.deployEnvironment, 'Non-Production'), eq(variables['Build.SourceBranch'], 'refs/heads/develop') ) }}:
    value: "core-it/cfs-infra-ci"
   # deployment to Non-Production environment can be from the develop or a feature branch for the pipeline yaml
   # allow deployment to non-production from a feature branch, using the PR build (a PR needs to be raised on the feature branch, and wait for it to finish building a deployment artifact). 
   ${{ elseif and( eq(parameters.deployEnvironment, 'Non-Production'), startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/') ) }}:
    value: "core-it/cfs-infra-pr-develop"
   #branch and/or deployEnvironment are not valid -> do not pull any artifact, just let the pipeline error out
   ${{ else }}:
    value: ""

 # Artifact Package Definition Value
 - name: artifactDefinition  
   value: CFS.Core.$(landingZoneServiceId)

 # Azure DevOps Environments
 - name: AzureDevOpsEnvironments
   value: ${{ parameters.deployEnvironment }}      

 # Azure DevOps AustraliaEastOffsetSymbol
 - name: AustraliaEastOffsetSymbol 
   ${{ if eq(variables.isDayLightSavings, true) }}:
     value: "PT11H"
   ${{ else }}:
     value: "PT10H"

  # Deployment Type
 - name: deploymentType  
   ${{ if eq(variables.useWhatIfDeploymentType, true) }}:
    value: "what-if"
   ${{ else }}:
    value: "create"

 #  Landing Zone Subscription ID
 - name: landingZoneSubscriptionID 
   ${{ if eq(parameters.deployEnvironment, 'Non-Production') }}:
     ${{ if eq(variables.landingZoneServiceId, 'BKOF') }}:
       value: $(subsc-np-backoffice-sid)
     ${{ else }}:
       value: $(subsc-np-$(landingZoneServiceId)-sid)
   ${{ if eq(parameters.deployEnvironment, 'Production') }}:
     ${{ if eq(variables.landingZoneServiceId, 'BKOF') }}: 
       value: $(subsc-prd-backoffice-sid)
     ${{ else }}:
       value: $(subsc-prd-$(landingZoneServiceId)-sid)

 # Azure DevOps Landing Zone Service Connection Name
 - name: landingZoneServiceConnection 
   ${{ if eq(parameters.deployEnvironment, 'Production') }}:   
      value: "sc-subsc-prd-bkof-001"        
   ${{ if eq(parameters.deployEnvironment, 'Non-Production') }}:   
      value: "sc-subsc-np-bkof-001"      

 # Subscription Service Name
 - name: subscriptionServiceName
   value: "CFSCO Management Group" 

 # Azure CLI Deployment Names Dynamically Applied Per Stage
 - name: deploymentName
   value: '$(System.StageDisplayName)_$(Build.BuildNumber)'
 
 - name: adminP
   value: '$(adminPassword)'

 - name: domainPassword
   ${{ if eq(parameters.deployEnvironment, 'Non-Production') }}:
    value: '$(np-domain-join-password)'
   ${{ if eq(parameters.deployEnvironment, 'Production') }}:
    value: '$(prd-domain-join-password)'

 # Diagnostic Settings Storage Resource Group
 - name: storageAccountResourceGroup  
   ${{ if eq(parameters.deployEnvironment, 'Non-Production') }}:
     value: "rg-np-edc-sec-stor-001"
   ${{ if eq(parameters.deployEnvironment, 'Production') }}:
     value: "rg-prd-edc-sec-stor-001"

 # Diagnostic Settings Storage Account
 - name: storageAccountName
   ${{ if eq(parameters.deployEnvironment, 'Non-Production') }}:
     value: "stonpedcdiagnlogs003"
   ${{ if eq(parameters.deployEnvironment, 'Production') }}:
     value: "stonpedcdiagnlogs001"

# Workspace Resource Group
 - name: workspaceResourceGroup
   ${{ if eq(parameters.deployEnvironment, 'Non-Production') }}:
     value: "rg-np-edc-sec-sec-001"
   ${{ if eq(parameters.deployEnvironment, 'Production') }}:
     value: "rg-prd-edc-sec-sec-001"
 
 # Security Subscription ID
 - name: securitySubscriptionId
   ${{ if eq(parameters.deployEnvironment, 'Non-Production') }}:
     value: $(sc-subsc-np-security-sid)
   ${{ if eq(parameters.deployEnvironment, 'Production') }}:
     value: $(sc-subsc-prd-security-sid)

 # Workspace name
 - name: workspaceName 
   ${{ if eq(parameters.deployEnvironment, 'Non-Production') }}:
     value: "ws-np-edc-001"
   ${{ if eq(parameters.deployEnvironment, 'Production') }}:
     value: "ws-prd-edc-001"

# keyVaultName
 - name: keyVaultName
   ${{ if eq(variables.landingZoneServiceId, 'BKOF') }}:
      value: 'kv-$(AzureEnvironmentPrefix)-$(workspaceLocationPrefix)-bkof-001'
   ${{ else }}:
      value: 'kv-$(AzureEnvironmentPrefix)-$(workspaceLocationPrefix)-$(landingZoneServiceId)-001'
 
 - name: rgName 
   ${{ if eq(variables.landingZoneServiceId, 'BKOF') }}:
      value: 'rg-$(AzureEnvironmentPrefix)-$(workspaceLocationPrefix)-bkof-dm-001'
   ${{ else }}:
      value: 'rg-$(AzureEnvironmentPrefix)-$(workspaceLocationPrefix)-$(landingZoneServiceId)-dm-001'

 - name: dmVMName
   value: 'VM$(AzureEnvironmentPrefix)$(workspaceLocationPrefix)dm$(Build.BuildId)'
  
 - name: pathToDeployStorageAccount
   ${{ if eq(parameters.targetDataType, 'internal') }}:
     value: templates/deploy-DataLake.yml
   ${{ else }}:
     value: templates/deploy-Sftp.yml

stages:

# Deploy SshKey
  # - stage: generateSshKey
  #   displayName: GenerateSshKey 

  #   pool:
  #     vmImage: windows-latest

  #   condition: succeeded()
  #   dependsOn: []
  #   jobs:
  #   - deployment: GenerateSshKey
  #     workspace:
  #       clean: all

  #     environment: $(AzureDevOpsEnvironments)
  #     strategy:
  #       runOnce:
  #         deploy:
  #           steps:

  #           - checkout: self

  #           - task: Bash@3
  #             inputs:
  #               targetType: 'inline'
  #               script: |
  #                 echo '$(environment)'
  #                 echo '$(azureTenantId)'
  #                 echo '$(resourceLocation)'
  #                 echo '$(workspaceLocationPrefix)'
  #                 echo '$(AzureDevOpsEnvironments)'
  #                 echo '$(workspaceName)'
  #                 echo '$(artifactFeed)'
  #                 echo '$(AzureEnvironmentPrefix)'
  #                 echo '$(dmIpTobeWhiteListed)'
  #                 echo '$(landingZoneSubscriptionID)'
  #                 echo '$(landingZoneServiceConnection)'
  #                 echo '$(storageAccountResourceGroup)'
  #                 echo '$(storageAccountName)'
  #                 echo '$(workspaceResourceGroup)'
  #                 echo '$(securitySubscriptionId)'
  #                 echo '$(workspaceName)'
  #                 echo '$(keyVaultName)'
  #                 echo '$(rgName)'
  #                 echo '$(Build.BuildId)'
  #                 echo '$(pathToDeployStorageAccount)'
  #                 echo '*****$(targetDataType)*****'

#               env:
#                 BASH_ENV: '~/.profile'

#             - task: DownloadPackage@1
#               displayName: DownloadArtifacts
#               inputs:
#                 packageType: 'nuget'
#                 feed: '$(artifactFeed)'
#                 definition: '$(artifactDefinition)'
#                 version: '$(artifactVersion)'
#                 extract: true
#                 downloadPath: '$(System.ArtifactsDirectory)'            

#             #SshKey            
#             - template: templates/deploy-SshKey.yml
#               parameters:                
#                 serviceConnection: '$(landingZoneServiceConnection)'                  
#                 deploymentType: '$(deploymentType)'
#                 serviceId: '$(landingZoneServiceId)' 
  
 # Deploy Sftp
  - stage: deployDestinationStorageAccount
    displayName: DeployDestinationStorageAccount 

    pool:
      vmImage: windows-latest

    condition: succeeded()
    dependsOn: [generateSshKey]
    jobs:
    - deployment: DeployDestinationStorageAccount 
      workspace:
        clean: all

      environment: $(AzureDevOpsEnvironments)
      strategy:
        runOnce:
          deploy:
            steps:

            - checkout: self

            - task: DownloadPackage@1
              displayName: DownloadArtifacts
              inputs:
                packageType: 'nuget'
                feed: '$(artifactFeed)'
                definition: '$(artifactDefinition)'
                version: '$(artifactVersion)'
                extract: true
                downloadPath: '$(System.ArtifactsDirectory)' 

            #Sftp 
            - template: '$(pathToDeployStorageAccount)''
              parameters:
                serviceName: '$(subscriptionServiceName)'
                serviceConnection: '$(landingZoneServiceConnection)'  
                deploymentType: '$(deploymentType)'
                serviceId: '$(landingZoneServiceId)' 
          
    
  # Deploy VM
  - stage: deployVM
    displayName: DeployVM

    pool:
      vmImage: windows-latest
    
    dependsOn: []

    jobs:
    - deployment: DeployVM
      workspace:
        clean: all

      environment: $(AzureDevOpsEnvironments)
      strategy:
        runOnce:
          deploy:
            steps:

            - checkout: self

            - task: DownloadPackage@1
              displayName: DownloadArtifacts
              inputs:
                packageType: 'nuget'
                feed: '$(artifactFeed)'
                definition: '$(artifactDefinition)'
                version: '$(artifactVersion)'
                extract: true
                downloadPath: '$(System.ArtifactsDirectory)'            

            #VM
            - template: templates/deploy-VM.yml              
              parameters:
                serviceId: '$(landingZoneServiceId)' 
                serviceConnection: '$(landingZoneServiceConnection)'                  
                deploymentType: '$(deploymentType)'
                keyVaultName: '$(keyVaultName)'        
  
  # Use Custom Pool
  - stage: useCustomPool
    displayName: UseCustomPool

    pool: 
      name: $(agentPool)
       
    
    dependsOn: [deployVM]

    jobs:
    - deployment: UseCustomPool
      workspace:
        clean: all

      environment: $(AzureDevOpsEnvironments)
      strategy:
        runOnce:
          deploy:
            steps:

            - checkout: self

            - task: DownloadPackage@1
              displayName: DownloadArtifacts
              inputs:
                packageType: 'nuget'
                feed: '$(artifactFeed)'
                definition: '$(artifactDefinition)'
                version: '$(artifactVersion)'
                extract: true
                downloadPath: '$(System.ArtifactsDirectory)'            

            # #VM
            # - template: templates/deploy-VM.yml              
            #   parameters:
            #     serviceId: '$(landingZoneServiceId)' 
            #     serviceConnection: '$(landingZoneServiceConnection)'                  
            #     deploymentType: '$(deploymentType)'
            #     keyVaultName: '$(keyVaultName)'    
            
                


  # # Execute PowerShell 
  # - stage: executePowerShellTaskOnVM
  #   displayName: ExecutePowerShellTaskOnVM

  #   pool:
  #     vmImage: windows-latest
    
  #   dependsOn: []

  #   jobs:
  #   - deployment: ExecutePowerShellTaskOnVM
  #     workspace:
  #       clean: all

  #     environment: $(AzureDevOpsEnvironments)
  #     strategy:
  #       runOnce:
  #         deploy:
  #           steps:

  #           - checkout: self

  #           - task: DownloadPackage@1
  #             displayName: DownloadArtifacts
  #             inputs:
  #               packageType: 'nuget'
  #               feed: '$(artifactFeed)'
  #               definition: '$(artifactDefinition)'
  #               version: '$(artifactVersion)'
  #               extract: true
  #               downloadPath: '$(System.ArtifactsDirectory)'            

  #           #VM
  #           - template: templates/executePowerShellTaskOnVM.yml
  #             parameters:
  #               serviceId: '$(landingZoneServiceId)' 
  #               serviceConnection: '$(landingZoneServiceConnection)'                  
                 

            # # Execute PowerShell scripts on remote machines using PSSession and Invoke-Command for remoting.
            # - task: PowerShellOnTargetMachines@3
            #   inputs:
            #     Machines: # string. Required. Machines. 
            #     UserName: AdministratorCFS
            #     UserPassword: '$(adminPassword)'
            #   # Script options
            #     ScriptPath: '$(System.ArtifactsDirectory)\content\scripts\Stripe.ps1'
            #     ScriptArguments: '2' 
                         
                