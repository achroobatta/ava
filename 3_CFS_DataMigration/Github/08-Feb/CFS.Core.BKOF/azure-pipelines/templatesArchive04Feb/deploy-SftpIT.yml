#deploy-storageAccount.yml

parameters:

- name: serviceName
  type: string

- name: serviceConnection
  type: string

- name: deploymentType
  type: string

- name: serviceId
  type: string    

steps:       
            
  - task: PowerShell@2
    inputs:
      targetType: 'inline' 
      script: |              
                   # for original below line should be uncommented  
                   # $computervm = '$(dmVMName)'
                   $computervm = 'VMnpedcdm7702'    
                   echo '******************************************************************'
                   echo 'Create and Upload ssh key to keyVault. Send sshPrivateKey in Email'
                   echo '******************************************************************'
                   echo 'Computer Name: ' $computervm                   
                   ls $(System.DefaultWorkingDirectory)\CFS.Core.BKOF\scripts\*
                   echo '******************************************************************'
                   echo 'pwd: ' $(mountPwd)
                   $pwd = ConvertTo-SecureString -String $(mountPwd) -AsPlainText -Force
                   echo '******************************************************************'
                   echo 'serviceAccountUser: ' $(serviceAccountU)
                   echo 'depStorageAccount: ' $(depStorageAccount)
                   $User = '$(serviceAccountUE)'                         
                   $Password = ConvertTo-SecureString -String $(serviceAccountP) -AsPlainText -Force             
                   $Credential = [pscredential]::new($User,$Password)
                   $ScriptBlock = {
                        Start-Process -FilePath Powershell.exe -ArgumentList "-File","C:\Users\$(serviceAccountU)\scripts\CreateAndUploadSshKey.ps1","-serviceAcctUserName","$(serviceAccountU)","-sshKeyName","$(sshKeyName)","-rgName","$(commRG)","-keyVaultName","$(keyVaultNameforSecret)","-sftpRg","$(commRG)","-sftpStorageAcctName","$(destStorageAccountName)","-sftpContainerName","$(rootContainerName)","-clientId","$(ClientID)","-clientSecret","$(ClientSecret)","-tenantId","$(TenantDomain)","-senderEmailAddress","$(fromEmailAddress)","-receiverEmailAddress","$(emailAddress)","-taskNumber","$(dmTaskNumber)" -Wait -Verb RunAs -PassThru 2>&1
                   }
                   Invoke-Command -ComputerName $computervm -Credential $Credential -ScriptBlock $ScriptBlock -AsJob
                   $j = Get-Job
                   $j | Format-List -Property *
                   $result = $j | Receive-Job
                   # $ToSession = New-PSSession -ComputerName "$computervm" -Credential $Credential
                   # need to update parameters for send email
                   # Invoke-Command -Session $ToSession -FilePath "$(System.DefaultWorkingDirectory)\CFS.Core.BKOF\scripts\CreateAndUploadSshKey.ps1" -ArgumentList "$(serviceAccountU)","$(sshKeyName)","$(rgName)","$(keyVaultName)","$(rgName)","$(destStorageAccountName)","$(rootContainerName)","$(ClientID)","$(ClientSecret)","$(TenantDomain)","$(fromEmailAddress)","$(emailAddress)","$(dmTaskNumber)"

  - task: AzureCLI@2
    displayName : Deploy Sftp Storage Account in ${{ parameters.serviceName }} Subscription
    inputs:
      azureSubscription: ${{ parameters.serviceConnection }}
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: az deployment sub $(deploymentType) --location '$(resourceLocation)' `
                    --name $(deploymentName) `
                    --template-file $(System.ArtifactsDirectory)\content\bicep-templates\deployment\deployment-templates\deploy-SFTP.bicep `                    
                    --parameters environmentPrefix='$(AzureEnvironmentPrefix)' `
                    --parameters owner='$(owner)' `
                    --parameters costCenter='$(costCenterCode)' `
                    --parameters sshKeyName='$(sshKeyName)' `
                    --parameters appName='$(appName)' `
                    --parameters resourceLocation='$(resourceLocation)' `
                    --parameters sftpstorageAccountName='$(destStorageAccountName)' `
                    --parameters sftpRootContainerName='$(rootContainerName)' `
                    --parameters warrantyPeriod='$(warrantyPeriod)' `
                    --parameters ipTobeWhiteListed='$(ipTobeWhiteListed)' `
                    --parameters sftpUserName='$(sftpUserName)' `
                    --parameters australiaEastOffsetSymbol='$(AustraliaEastOffsetSymbol)' `
                    --parameters $(System.ArtifactsDirectory)\content\bicep-templates\deployment\04-SFTP\sftp-${{ parameters.serviceId }}.param.$(AzureEnvironmentPrefix).json 
  
  - task: PowerShell@2
    inputs:
      targetType: 'inline' 
      script: |              
                   # for original below line should be uncommented  
                   # $computervm = '$(dmVMName)'
                   $computervm = 'VMnpedcdm7702'    
                   echo '******************************************************************'
                   echo 'Upload Dummy File to Sftp StorageAccount'
                   echo '******************************************************************'
                   echo 'Computer Name: ' $computervm                   
                   ls $(System.DefaultWorkingDirectory)\CFS.Core.BKOF\scripts\*
                   echo '******************************************************************'
                   echo 'pwd: ' $(mountPwd)
                   $pwd = ConvertTo-SecureString -String $(mountPwd) -AsPlainText -Force
                   echo '******************************************************************'
                   echo 'serviceAccountUser: ' $(serviceAccountU)
                   echo 'depStorageAccount: ' $(depStorageAccount)
                   $User = '$(serviceAccountUE)'                         
                   $Password = ConvertTo-SecureString -String $(serviceAccountP) -AsPlainText -Force             
                   $Credential = [pscredential]::new($User,$Password)
                   $ScriptBlock = {
                        Start-Process -FilePath Powershell.exe -ArgumentList "-File","C:\Users\$(serviceAccountU)\scripts\UploadDummytoSftp.ps1","-sftpRg","$(commRG)","-sftpStorageAcctName","$(destStorageAccountName)","-sftpContainerName","$(rootContainerName)","-keyVaultName","$(keyVaultNameforSecret)","-clientId","$(ClientID)","-clientSecret","$(ClientSecret)","-tenantId","$(TenantDomain)","-senderEmailAddress","$(fromEmailAddress)","-receiverEmailAddress","$(emailAddress)","-taskNumber","$(dmTaskNumber)" -Wait -Verb RunAs -PassThru 2>&1
                   }
                   Invoke-Command -ComputerName $computervm -Credential $Credential -ScriptBlock $ScriptBlock -AsJob
                   $j = Get-Job
                   $j | Format-List -Property *
                   $result = $j | Receive-Job
                   # $ToSession = New-PSSession -ComputerName "$computervm" -Credential $Credential
                   # need to update parameters
                   # Invoke-Command -Session $ToSession -FilePath "$(System.DefaultWorkingDirectory)\CFS.Core.BKOF\scripts\UploadDummytoSftp.ps1" -ArgumentList "$(commRG)","$(destStorageAccountName)","$(rootContainerName)","$(keyVaultNameforSecret)","$(ClientID)","$(ClientSecret)","$(TenantDomain)","$(fromEmailAddress)","$(emailAddress)","$(dmTaskNumber)"
 
  - task: GraphEmail@0        
    displayName: 'Sending sFtp Username using Graph Api'
    inputs:
      To: '$(emailAddress)' # The Business User who will receive the email 
      From: '$(fromEmailAddress)'
      Subject: 'Sftp Local Username for taskNumber $(dmTaskNumber). Please validate your access to dummyFile.' # Email Subject
      Body: "Username for sFTP is: $(destStorageAccountName).$(sftpUserName). Hostname is: $(destStorageAccountName).blob.core.windows.net. Dummy File Name: dummyCFS.txt is uploaded. Ssh private key and Ssh Password is aleady sent in seperate email. Please validate it and notify, if you can access dummy file using these credentials. On completion of Extraction process, actual filename will be shared, using same credentials, you will able to download actualfile. Please save these credentials for future." # Email Body
      BodyAsHtml: true  
      ShowClientSecret: false
      ClientID: $(ClientID) 
      ClientSecret: $(ClientSecret) 
      TenantDomain: $(TenantDomain) 