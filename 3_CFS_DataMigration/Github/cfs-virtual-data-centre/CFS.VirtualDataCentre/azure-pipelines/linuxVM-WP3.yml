trigger: none # will disable CI builds entirely

pr: none # will disable PR builds entirely; will not disable CI triggers
    
parameters:
  - name: deployEnvironments
    displayName: Environment Pipelines
    type: string
    default: "Non-Production"
    values:
     - "Non-Production"
     - "Production"

  - name: artifactVersion
    displayName: Artifact/Package Version (e.g. "latest" or "0.0.0.256" or "1.0.0.1")
    type: string
    default: "latest"

  - name: isDayLightSavings
    displayName: Enable DayLight Savings Time
    type: boolean
    default: false
    values:
     - false
     - true

 # This parameter does not have a true value so it won't do anything until the code is added if a develop environment was used in future
 # This should only be used in a end to end development environments not in production or the current deployed non-production environment.
 # Destroy Deployment from Azure CLI
  - name: destroyDeployment
    displayName: DestroyStageResourceGroups
    type: boolean
    default: False
    values:
     - False
#     - True

variables:

 - group: var-service-principle-secrets
 - group: var-azure-tenant-id

#workspaces are in edc only
 - name: workspaceLocationPrefix
   value: "edc"

 # Artifact Package Feed Value
 - name: artifactFeed
 
   # deployment to Production environment must use the main branch for the pipeline yaml
   ${{ if and( eq(parameters.deployEnvironment, 'Production'), eq(variables['Build.SourceBranch'], 'refs/heads/main') ) }}:
    value: "core-it/cfs-infra-release"
   # deployment to Non-Production environment can be from the develop or a feature branch for the pipeline yaml
   ${{ elseif and( eq(parameters.deployEnvironment, 'Non-Production'), eq(variables['Build.SourceBranch'], 'refs/heads/develop') ) }}:
    value: "core-it/cfs-infra-ci"
   # deployment to Non-Production environment can be from the develop or a feature branch for the pipeline yaml
   # allow deployment to non-production from a feature branch, using the PR build (a PR needs to be raised on the feature branch, and wait for it to finish building a deployment artifact).
   ${{ elseif and( eq(parameters.deployEnvironment, 'Non-Production'), startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/') ) }}:
    value: "core-it/cfs-infra-pr-develop"
   #branch and/or deployEnvironment are not valid -> do not pull any artifact, just let the pipeline error out
   ${{ else }}:
    value: ""

 # Artifact Package Definition Value
 - name: artifactDefinition
   value: "CFS.VirtualDataCentre"

 # Artifact Package Version Value
 - name: artifactVersion
   value: ${{ parameters.artifactVersion }}

 # Azure DevOps Environments
 - name: AzureDevOpsEnvironments
   ${{ if eq(parameters.deployEnvironments, 'Non-Production') }}:
     value: "Non-Production"
   ${{ if eq(parameters.deployEnvironments, 'Production') }}:
     value: "Production"

 # Azure DevOps Service Connection Name
 - name: AzureEnvironmentPrefix
   ${{ if eq(parameters.deployEnvironments, 'Non-Production') }}:
     value: "np"
   ${{ if eq(parameters.deployEnvironments, 'Production') }}:
     value: "prd"

 # Azure DevOps Connectivity Service Connection Name
 - name: connectivitySubscServiceConnection
   ${{ if eq(parameters.deployEnvironments, 'Non-Production') }}:
     value: "sc-subsc-np-connectivity-001"
   ${{ if eq(parameters.deployEnvironments, 'Production') }}:
     value: "sc-subsc-prd-connectivity-001"

 # Azure DevOps Back Office Service Connection Name
 - name: backOfficeSubscServiceConnection
   ${{ if eq(parameters.deployEnvironments, 'Non-Production') }}:
     value: "sc-subsc-np-backoffice-001"
   ${{ if eq(parameters.deployEnvironments, 'Production') }}:
     value: "sc-subsc-prd-backoffice-001" 

 # Azure DevOps Connectivity Service Connection Name
 - name: managementSubscServiceConnection
   ${{ if eq(parameters.deployEnvironments, 'Non-Production') }}:
     value: "sc-mg-cfsco-nprd"
   ${{ if eq(parameters.deployEnvironments, 'Production') }}:
     value: "sc-mg-cfsco-prd"

 # Azure DevOps Group Management Id
 - name: managementGroupId
   ${{ if eq(parameters.deployEnvironments, 'Non-Production') }}:
     value: "CFSCoNonProd"
   ${{ if eq(parameters.deployEnvironments, 'Production') }}:
     value: "CFSCoProd"

 # Azure DevOps Identity Service Connection Name
 - name: identitySubscServiceConnection
   ${{ if eq(parameters.deployEnvironments, 'Non-Production') }}:
     value: "sc-subsc-np-identity-001"
   ${{ if eq(parameters.deployEnvironments, 'Production') }}:
     value: "sc-subsc-prd-identity-001"

 # Azure DevOps Operations Service Connection Name
 - name: operationsSubscServiceConnection
   ${{ if eq(parameters.deployEnvironments, 'Non-Production') }}:
     value: "sc-subsc-np-operations-001"
   ${{ if eq(parameters.deployEnvironments, 'Production') }}:
     value: "sc-subsc-prd-operations-001"

 # Azure DevOps Security Service Connection Name
 - name: securitySubscServiceConnection
   ${{ if eq(parameters.deployEnvironments, 'Non-Production') }}:
     value: "sc-subsc-np-security-001"
   ${{ if eq(parameters.deployEnvironments, 'Production') }}:
     value: "sc-subsc-prd-security-001"

 # Security Subscription ID
 - name: securitySubscriptionId
   ${{ if eq(parameters.deployEnvironments, 'Non-Production') }}:
     value: $(sc-subsc-np-security-sid)
   ${{ if eq(parameters.deployEnvironments, 'Production') }}:
     value: $(sc-subsc-prd-security-sid)

 # Connectivity Subscription ID
 - name: connectivitySubscriptionId
   ${{ if eq(parameters.deployEnvironments, 'Non-Production') }}:
     value: $(sc-subsc-np-connectivity-sid)
   ${{ if eq(parameters.deployEnvironments, 'Production') }}:
     value: $(sc-subsc-prd-connectivity-sid)

 # Operations Subscription ID
 - name: operationsSubscriptionId
   ${{ if eq(parameters.deployEnvironments, 'Non-Production') }}:
     value: $(sc-subsc-np-operations-sid)
   ${{ if eq(parameters.deployEnvironments, 'Production') }}:
     value: $(sc-subsc-prd-operations-sid)

 # Identity Subscription ID
 - name: identitySubscriptionId
   ${{ if eq(parameters.deployEnvironments, 'Non-Production') }}:
     value: $(sc-subsc-np-identity-sid)
   ${{ if eq(parameters.deployEnvironments, 'Production') }}:
     value: $(sc-subsc-prd-identity-sid)

## TODO: - 30/06/2022 - AB#197 - Delete after checking with VDC - This is not required because the only bicep that requires this is $(System.ArtifactsDirectory)\$(deployments)\deploy-WP3\deployLinuxVM.bicep, and that bicep no longer exists
## Back Office Subscription ID
# - name: backOfficeSubscriptionId
#   ${{ if eq(parameters.deployEnvironments, 'Non-Production') }}:
#     value: $(sc-subsc-np-backoffice-sid)
#   ${{ if eq(parameters.deployEnvironments, 'Production') }}:
#     value: $(sc-subsc-prd-backoffice-sid)

 # Azure Tenant ID
 - name: azureTenantIdvar
   ${{ if eq(parameters.deployEnvironments, 'Non-Production') }}:
     value: $(np-azure-tenant-id)
   ${{ if eq(parameters.deployEnvironments, 'Production') }}:
     value: $(prd-azure-tenant-id)

# Azure DevOps AustraliaEastOffsetSymbol
 - name: AustraliaEastOffsetSymbol
   ${{ if eq(parameters.isDayLightSavings, true) }}:
     value: "PT11H"
   ${{ else }}:
     value: "PT10H"

 # Azure OwnerÂ 
 - name: Owner
   value: ""
   
 # Azure Cost Center Code
 - name: costCenterCode
   value: ""

 # Azure CLI Deployment Names Dynamically Applied Per Stage
 - name: deploymentName
   value: '$(System.StageDisplayName)_$(Build.BuildNumber)'

 # Azure Resource Location
 - name: resourceLocation
   value: "australiaeast"

stages:                         

## TODO: - 30/06/2022 - AB#197 - Delete after checking with VDC - This is not required because the bicep $(System.ArtifactsDirectory)\$(deployments)\deploy-WP3\deployLinuxVM.bicep no longer exists, so there is not way this yml will work
#  # Deploy DeployWP3LinuxVM
#  - stage: DeployWP3LinuxVM
#    displayName: DeployWP3LinuxVM
#
#    variables:
#    - group: var-azure-platform
#    - group: var-service-principle-secrets
#
#    pool:
#      vmImage: windows-latest
#
#    dependsOn: []
#    jobs:
#    - deployment: DeployWP3LinuxVM
#      workspace:
#        clean: all
#
#      environment: $(AzureDevOpsEnvironments)
#      strategy:
#        runOnce:
#          deploy:
#            steps:
#
#            - task: DownloadPackage@1
#              displayName: DownloadArtifacts
#              inputs:
#                packageType: 'nuget'
#                feed: '$(artifactFeed)'
#                definition: '$(artifactDefinition)'
#                version: '$(artifactVersion)'
#                extract: true
#                downloadPath: '$(System.ArtifactsDirectory)'
#
#            - ${{ if eq(parameters.destroyDeployment, false) }}:
#              - task: AzureCLI@2
#                displayName : DeployWP3LinuxVM
#                inputs:
#                  azureSubscription: $(backOfficeSubscServiceConnection)
#                  scriptType: 'pscore'
#                  scriptLocation: 'inlineScript'
#                  inlineScript: az deployment group create --resource-group rg-$(AzureEnvironmentPrefix)-edc-back-comp-001 ^
#                                --name $(deploymentName) ^
#                                --template-file $(System.ArtifactsDirectory)\$(deployments)\deploy-WP3\deployLinuxVM.bicep ^
#                                --parameters subscriptionId='$(backOfficeSubscriptionId)' ^
#                                --parameters resourceGroupName='rg-$(AzureEnvironmentPrefix)-edc-back-comp-001' ^
#                                --parameters $(System.ArtifactsDirectory)\$(deployments)\deploy-WP3\linuxVMparam.json

  
    
