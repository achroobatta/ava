trigger: none # will disable CI builds entirely

pr: none # will disable PR builds entirely; will not disable CI triggers

parameters:
  - name: deployEnvironment
    displayName: Target Deployment Environment
    type: string
    default: "Non-Production"
    values:
     - "Non-Production"
     - "Production"

  - name: artifactVersion
    displayName: Artifact/Package Version (e.g. "latest" or "0.0.0.256" or "1.0.0.1")
    type: string
    default: "latest"

  - name: landingZoneServiceId
    displayName: Subscription Service Id (e.g. "bkof", "fcp", "fwd" or "fwp")
    type: string
    default: ""
    values:
     - "bkof"
     - "fcp"
     - "fwd"
     - "fwp"

  - name: isDayLightSavings
    displayName: Enable DayLight Savings Time
    type: boolean
    default: false
    values:
     - false
     - true

  - name: useWhatIfDeploymentType
    displayName: What-If Deployment
    type: boolean
    default: true
    values:
     - false
     - true

variables:

 - group: lz-var-service-principle-secrets
 - group: var-azure-tenant-id

 #workspaces are in edc only
 - name: workspaceLocationPrefix
   value: "edc"

 # Artifact Package Feed Value
 - name: artifactFeed
 
   # deployment to Production environment must use the main branch for the pipeline yaml
   ${{ if and( eq(parameters.deployEnvironment, 'Production'), eq(variables['Build.SourceBranch'], 'refs/heads/main') ) }}:
    value: "core-it/cfs-infra-release"
   # deployment to Non-Production environment can be from the develop or a feature branch for the pipeline yaml
   ${{ elseif and( eq(parameters.deployEnvironment, 'Non-Production'), eq(variables['Build.SourceBranch'], 'refs/heads/develop') ) }}:
    value: "core-it/cfs-infra-ci"
   # deployment to Non-Production environment can be from the develop or a feature branch for the pipeline yaml
   # allow deployment to non-production from a feature branch, using the PR build (a PR needs to be raised on the feature branch, and wait for it to finish building a deployment artifact).
   ${{ elseif and( eq(parameters.deployEnvironment, 'Non-Production'), startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/') ) }}:
    value: "core-it/cfs-infra-pr-develop"
   #branch and/or deployEnvironment are not valid -> do not pull any artifact, just let the pipeline error out
   ${{ else }}:
    value: ""

 # Artifact Package Definition Value
 - name: artifactDefinition
   value: "CFS.VirtualDataCentre"

 # Artifact Package Version Value
 - name: artifactVersion
   value: ${{ parameters.artifactVersion }}

 # Azure DevOps Environments
 - name: AzureDevOpsEnvironments
   value: ${{ parameters.deployEnvironment }}

 # Azure DevOps Service Connection Name
 - name: AzureEnvironmentPrefix
   ${{ if eq(parameters.deployEnvironment, 'Non-Production') }}:
     value: "np"
   ${{ if eq(parameters.deployEnvironment, 'Production') }}:
     value: "prd"

 # Landing Zone Type
 - name: landingZoneType
   value: "01-Landing-Zone"

 # Service Name
 - name: subscriptionServiceName
   ${{ if eq(parameters.landingZoneServiceId, 'bkof') }}:
     value: "Back Office"
   ${{ if eq(parameters.landingZoneServiceId, 'fcp') }}:
     value: "First Choice"
   ${{ if eq(parameters.landingZoneServiceId, 'fwp') }}:
     value: "CFS Wrap"
   ${{ if eq(parameters.landingZoneServiceId, 'fwd') }}:
     value: "CFS Wrap Data"

 # Azure DevOps Connectivity Service Connection Name
 - name: managementSubscServiceConnection
   ${{ if eq(parameters.deployEnvironment, 'Non-Production') }}:
     value: "sc-mg-cfsco-nprd"
   ${{ if eq(parameters.deployEnvironment, 'Production') }}:
     value: "sc-mg-cfsco-prd"

 # Azure DevOps Group Management Id
 - name: managementGroupId
   ${{ if eq(parameters.deployEnvironment, 'Non-Production') }}:
     value: "CFSCoNonProd"
   ${{ if eq(parameters.deployEnvironment, 'Production') }}:
     value: "CFSCoProd"

 #  Landing Zone Subscription ID
 - name: landingZoneSubscriptionID
   ${{ if eq(parameters.deployEnvironment, 'Non-Production') }}:
     ${{ if contains(parameters.landingZoneServiceId, 'bkof' ) }}:
       value: $(subsc-np-backoffice-sid)
     ${{ else }}:
       value: $(subsc-np-${{ parameters.landingZoneServiceId }}-sid)
   ${{ if eq(parameters.deployEnvironment, 'Production') }}:
     ${{ if contains(parameters.landingZoneServiceId, 'bkof' ) }}:
       value: $(subsc-prd-backoffice-sid)
     ${{ else }}:
       value: $(subsc-prd-${{ parameters.landingZoneServiceId }}-sid)

 # Security Subscription ID
 - name: securitySubscriptionId
   ${{ if eq(parameters.deployEnvironment, 'Non-Production') }}:
     value: $(sc-subsc-np-security-sid)
   ${{ if eq(parameters.deployEnvironment, 'Production') }}:
     value: $(sc-subsc-prd-security-sid)

 # Connectivity Subscription ID
 - name: connectivitySubscriptionId
   ${{ if eq(parameters.deployEnvironment, 'Non-Production') }}:
     value: $(sc-subsc-np-connectivity-sid)
   ${{ if eq(parameters.deployEnvironment, 'Production') }}:
     value: $(sc-subsc-prd-connectivity-sid)

 # Azure DevOps Landing Zone Service Connection Name
 - name: landingZoneServiceConnection
   ${{ if eq(parameters.deployEnvironment, 'Non-Production') }}:
     value: "sc-subsc-np-${{ parameters.landingZoneServiceId }}-001"
   ${{ if eq(parameters.deployEnvironment, 'Production') }}:
     value: "sc-subsc-prd-${{ parameters.landingZoneServiceId }}-001"

 # Azure DevOps Connectivity Service Connection Name
 - name: connectivitySubscServiceConnection
   ${{ if eq(parameters.deployEnvironment, 'Non-Production') }}:
     value: "sc-subsc-np-connectivity-001"
   ${{ if eq(parameters.deployEnvironment, 'Production') }}:
     value: "sc-subsc-prd-connectivity-001"

 # Azure Tenant ID
 - name: azureTenantIdvar
   ${{ if eq(parameters.deployEnvironment, 'Non-Production') }}:
     value: $(np-azure-tenant-id)
   ${{ if eq(parameters.deployEnvironment, 'Production') }}:
     value: $(prd-azure-tenant-id)

 # Azure DevOps AustraliaEastOffsetSymbol
 - name: AustraliaEastOffsetSymbol
   ${{ if eq(parameters.isDayLightSavings, true) }}:
     value: "PT11H"
   ${{ else }}:
     value: "PT10H"

 # Deployment Type
 - name: deploymentType
   ${{ if eq(parameters.useWhatIfDeploymentType, true) }}:
    value: "what-if"
   ${{ else }}:
    value: "create"

 # Azure OwnerÂ 
 - name: Owner
   value: "Robert Reakes"

 # Azure Cost Center Code
 - name: costCenterCode
   value: "4010"

 # Azure CLI Deployment Names Dynamically Applied Per Stage
 - name: deploymentName
   value: '$(System.StageDisplayName)_$(Build.BuildNumber)'

 # Azure Resource Location
 - name: resourceLocation
   value: "australiaeast"

stages:

  # Deploy Role Assignment To Landing Zone Subscription
  - stage: deployRoleAssignmentToLandingZoneSubscription
    displayName: DeployRoleAssignmentToLandingZoneSubscription

    variables:
    - group: var-azure-platform
    - group: lz-var-service-principle-secrets

    pool:
      vmImage: windows-latest

    dependsOn: []
    jobs:
    - deployment: DeployRoleAssignment
      workspace:
        clean: all

      environment: $(AzureDevOpsEnvironments)
      strategy:
        runOnce:
          deploy:
            steps:

            - task: DownloadPackage@1
              displayName: DownloadArtifacts
              inputs:
                packageType: 'nuget'
                feed: '$(artifactFeed)'
                definition: '$(artifactDefinition)'
                version: '$(artifactVersion)'
                extract: true
                downloadPath: '$(System.ArtifactsDirectory)'

            - template: templates/steps-tasks/deploy-RoleAssignmentToSubscription.yml
              parameters:
                serviceId: ${{ parameters.landingZoneServiceId }}
                serviceName: $(subscriptionServiceName)
                deploymentType: '$(deploymentType)'
                subscriptionId: '$(landingZoneSubscriptionID)'
                serviceConnection: '$(landingZoneServiceConnection)'
                landingZoneType: '$(landingZoneType)'

  # Enable Microsoft Defender for Cloud and Automate the Process
  - stage: EnableMicrosoftDefenderForCloud
    displayName: EnableMicrosoftDefenderForCloud

    variables:
    - group: var-azure-platform
    - group: lz-var-service-principle-secrets

    pool:
      vmImage: windows-latest

    dependsOn: []

    jobs:
    - deployment: EnableMicrosoftDefenderForCloud
      workspace:
        clean: all

      environment: $(AzureDevOpsEnvironments)
      strategy:
        runOnce:
          deploy:
            steps:

            - task: DownloadPackage@1
              displayName: DownloadArtifacts
              inputs:
                packageType: 'nuget'
                feed: '$(artifactFeed)'
                definition: '$(artifactDefinition)'
                version: '$(artifactVersion)'
                extract: true
                downloadPath: '$(System.ArtifactsDirectory)'

            - template: templates/steps-tasks/deploy-AzureSecurityCentre.yml
              parameters:
                serviceName: $(subscriptionServiceName)
                serviceConnection: '$(landingZoneServiceConnection)'

  # Deploy Route Table and NSG
  - stage: deployRTandNSG 
    displayName: DeployRTandNSG

    variables:
    - group: var-azure-platform
    - group: var-service-principle-secrets
    - group: lz-var-service-principle-secrets

    pool:
      vmImage: windows-latest

    dependsOn: []
    jobs:
    - deployment: DeployRTandNSG
      workspace:
        clean: all

      environment: $(AzureDevOpsEnvironments)
      strategy:
        runOnce:
          deploy:
            steps:

            - task: DownloadPackage@1
              displayName: DownloadArtifacts
              inputs:
                packageType: 'nuget'
                feed: '$(artifactFeed)'
                definition: '$(artifactDefinition)'
                version: '$(artifactVersion)'
                extract: true
                downloadPath: '$(System.ArtifactsDirectory)'

            - template: templates/steps-tasks/deploy-RTandNSG.yml
              parameters:
                serviceId: ${{ parameters.landingZoneServiceId }}
                serviceName: $(subscriptionServiceName)
                deploymentType: '$(deploymentType)'
                serviceConnection: '$(landingZoneServiceConnection)'
                securitySubscriptionId: '$(securitySubscriptionId)'
                landingZoneType: '$(landingZoneType)'

  # Deploy Landing Zone Virtual Network
  - stage: deployVirtualNetwork
    displayName: DeployVirtualNetwork

    variables:
    - group: var-azure-platform
    - group: var-service-principle-secrets
    - group: lz-var-service-principle-secrets

    pool:
      vmImage: windows-latest

    dependsOn: [deployRTandNSG]
    jobs:
    - deployment: DeployLandingZoneVirtualNetwork
      workspace:
        clean: all

      environment: $(AzureDevOpsEnvironments)
      strategy:
        runOnce:
          deploy:
            steps:

            - task: DownloadPackage@1
              displayName: DownloadArtifacts
              inputs:
                packageType: 'nuget'
                feed: '$(artifactFeed)'
                definition: '$(artifactDefinition)'
                version: '$(artifactVersion)'
                extract: true
                downloadPath: '$(System.ArtifactsDirectory)'

            - template: templates/steps-tasks/deploy-VDCVirtualNetwork.yml
              parameters:
                serviceId: ${{ parameters.landingZoneServiceId }}
                serviceName: $(subscriptionServiceName)
                deploymentType: '$(deploymentType)'
                serviceConnection: '$(landingZoneServiceConnection)'
                securitySubscriptionId: '$(securitySubscriptionId)'
                landingZoneType: '$(landingZoneType)'

  # Deploy Landing Zone NSG Rules
  - stage: deployNSGRules
    displayName: DeployNSGRules

    variables:
    - group: var-azure-platform
    - group: var-service-principle-secrets
    - group: lz-var-service-principle-secrets

    pool:
      vmImage: windows-latest

    dependsOn: [deployRTandNSG]
    jobs:
    - deployment: DeployNSGRules
      workspace:
        clean: all

      environment: $(AzureDevOpsEnvironments)
      strategy:
        runOnce:
          deploy:
            steps:

            - task: DownloadPackage@1
              displayName: DownloadArtifacts
              inputs:
                packageType: 'nuget'
                feed: '$(artifactFeed)'
                definition: '$(artifactDefinition)'
                version: '$(artifactVersion)'
                extract: true
                downloadPath: '$(System.ArtifactsDirectory)'

            - template: templates/steps-tasks/deploy-NSGRules.yml
              parameters:
                serviceId: ${{ parameters.landingZoneServiceId }}
                serviceName: $(subscriptionServiceName)
                deploymentType: '$(deploymentType)'
                serviceConnection: '$(landingZoneServiceConnection)'
                landingZoneType: '$(landingZoneType)'

  # Deploy Landing Zone UDR Rules
  - stage: deployUDRRules
    displayName: DeployUDRRules

    variables:
    - group: var-azure-platform
    - group: var-service-principle-secrets
    - group: lz-var-service-principle-secrets

    pool:
      vmImage: windows-latest

    dependsOn: [deployRTandNSG]
    jobs:
    - deployment: DeployUDRRules
      workspace:
        clean: all

      environment: $(AzureDevOpsEnvironments)
      strategy:
        runOnce:
          deploy:
            steps:

            - task: DownloadPackage@1
              displayName: DownloadArtifacts
              inputs:
                packageType: 'nuget'
                feed: '$(artifactFeed)'
                definition: '$(artifactDefinition)'
                version: '$(artifactVersion)'
                extract: true
                downloadPath: '$(System.ArtifactsDirectory)'

            - template: templates/steps-tasks/deploy-UDRRules.yml
              parameters:
                serviceId: ${{ parameters.landingZoneServiceId }}
                serviceName: $(subscriptionServiceName)
                deploymentType: '$(deploymentType)'
                serviceConnection: '$(landingZoneServiceConnection)'
                landingZoneType: '$(landingZoneType)'


  # Deploy Landing Zone Storage Account
  - stage: deployStorageAccount
    displayName: DeployStorageAccount

    variables:
    - group: var-azure-platform
    - group: var-service-principle-secrets
    - group: lz-var-service-principle-secrets

    pool:
      vmImage: windows-latest

    dependsOn: [deployRTandNSG]
    jobs:
    - deployment: DeployStorageAccount
      workspace:
        clean: all

      environment: $(AzureDevOpsEnvironments)
      strategy:
        runOnce:
          deploy:
            steps:

            - task: DownloadPackage@1
              displayName: DownloadArtifacts
              inputs:
                packageType: 'nuget'
                feed: '$(artifactFeed)'
                definition: '$(artifactDefinition)'
                version: '$(artifactVersion)'
                extract: true
                downloadPath: '$(System.ArtifactsDirectory)'

            - template: templates/steps-tasks/deploy-StorageAccount.yml
              parameters:
                serviceId: ${{ parameters.landingZoneServiceId }}
                serviceName: $(subscriptionServiceName)
                deploymentType: '$(deploymentType)'
                serviceConnection: '$(landingZoneServiceConnection)'
                landingZoneType: '$(landingZoneType)'

  # Deploy Landing Zone Recovery Service Vault
  - stage: deployRSV
    displayName: DeployRSV

    variables:
    - group: var-azure-platform
    - group: var-service-principle-secrets
    - group: lz-var-service-principle-secrets

    pool:
      vmImage: windows-latest

    dependsOn: [deployRTandNSG]
    jobs:
    - deployment: DeployRSV
      workspace:
        clean: all

      environment: $(AzureDevOpsEnvironments)
      strategy:
        runOnce:
          deploy:
            steps:

            - task: DownloadPackage@1
              displayName: DownloadArtifacts
              inputs:
                packageType: 'nuget'
                feed: '$(artifactFeed)'
                definition: '$(artifactDefinition)'
                version: '$(artifactVersion)'
                extract: true
                downloadPath: '$(System.ArtifactsDirectory)'

            - template: templates/steps-tasks/deploy-RSV.yml
              parameters:
                serviceId: ${{ parameters.landingZoneServiceId }}
                serviceName: $(subscriptionServiceName)
                deploymentType: '$(deploymentType)'
                serviceConnection: '$(landingZoneServiceConnection)'
                securitySubscriptionId: '$(securitySubscriptionId)'
                subscriptionId: '$(landingZonesubscriptionID)'
                landingZoneType: '$(landingZoneType)'

  # Deploy Landing Zone Key Vault and Key Authentication
  - stage: deployKeyVault
    displayName: DeployKeyVault

    variables:
    - group: var-password-secret-value
    - group: var-azure-tenant-id
    - group: var-azure-platform
    - group: var-service-principle-secrets
    - group: lz-var-service-principle-secrets

    pool:
      vmImage: windows-latest

    dependsOn: [deployRTandNSG]
    jobs:
    - deployment: DeployKeyVault
      workspace:
        clean: all

      environment: $(AzureDevOpsEnvironments)
      strategy:
        runOnce:
          deploy:
            steps:

            - task: DownloadPackage@1
              displayName: DownloadArtifacts
              inputs:
                packageType: 'nuget'
                feed: '$(artifactFeed)'
                definition: '$(artifactDefinition)'
                version: '$(artifactVersion)'
                extract: true
                downloadPath: '$(System.ArtifactsDirectory)'

            - template: templates/steps-tasks/deploy-KeyVault.yml
              parameters:
                serviceId: ${{ parameters.landingZoneServiceId }}
                serviceName: $(subscriptionServiceName)
                deploymentType: '$(deploymentType)'
                serviceConnection: '$(landingZoneServiceConnection)'
                subscriptionId: '$(landingZoneSubscriptionID)'
                securitySubscriptionId: '$(securitySubscriptionId)'
                localAdminPassword: '$(dc-cfsadmin-secret)'
                landingZoneType: '$(landingZoneType)'

  # Deploy Landing Zone Network Peering
  - stage: deployNetworkPeering
    displayName: DeployNetworkPeering

    variables:
    - group: var-azure-platform
    - group: var-service-principle-secrets
    - group: lz-var-service-principle-secrets

    pool:
      vmImage: windows-latest

    dependsOn: [deployVirtualNetwork]
    jobs:
    - deployment: DeployNetworkPeering
      workspace:
        clean: all

      environment: $(AzureDevOpsEnvironments)
      strategy:
        runOnce:
          deploy:
            steps:

            - task: DownloadPackage@1
              displayName: DownloadArtifacts
              inputs:
                packageType: 'nuget'
                feed: '$(artifactFeed)'
                definition: '$(artifactDefinition)'
                version: '$(artifactVersion)'
                extract: true
                downloadPath: '$(System.ArtifactsDirectory)'

            - template: templates/steps-tasks/deploy-NetworkPeering-HubToSpoke.yml
              parameters:
                serviceId: ${{ parameters.landingZoneServiceId }}
                serviceName: $(subscriptionServiceName)
                deploymentType: '$(deploymentType)'
                serviceConnection: '$(landingZoneServiceConnection)'
                subscriptionId: '$(landingZoneSubscriptionID)'
                connectivitySubscServiceConnection: '$(connectivitySubscServiceConnection)'
                connectivitySubscriptionId: '$(connectivitySubscriptionId)'
                landingZoneType: '$(landingZoneType)'

  # Deploy VM Backup
  - stage: deployVMBackup
    displayName: DeployVMBackup

    variables:
    - group: var-azure-platform
    - group: var-service-principle-secrets
    - group: lz-var-service-principle-secrets

    pool:
      vmImage: windows-latest

    dependsOn: [deployRSV]
    jobs:
    - deployment: DeployVMBackup
      workspace:
        clean: all

      environment: $(AzureDevOpsEnvironments)
      strategy:
        runOnce:
          deploy:
            steps:

            - task: DownloadPackage@1
              displayName: DownloadArtifacts
              inputs:
                packageType: 'nuget'
                feed: '$(artifactFeed)'
                definition: '$(artifactDefinition)'
                version: '$(artifactVersion)'
                extract: true
                downloadPath: '$(System.ArtifactsDirectory)'

            - template: templates/steps-tasks/deploy-VMBackup.yml
              parameters:
                serviceId: ${{ parameters.landingZoneServiceId }}
                serviceName: $(subscriptionServiceName)
                deploymentType: '$(deploymentType)'
                serviceConnection: '$(landingZoneServiceConnection)'
                securitySubscriptionId: '$(securitySubscriptionId)'
                landingZoneType: '$(landingZoneType)'

  # Deploy Resource Groups
  - stage: deployResourceGroup
    displayName: DeployResourceGroup

    variables:
    - group: var-azure-platform
    - group: var-service-principle-secrets
    - group: lz-var-service-principle-secrets

    pool:
      vmImage: windows-latest

    dependsOn: []
    jobs:
    - deployment: DeployResourceGroup
      workspace:
        clean: all

      environment: $(AzureDevOpsEnvironments)
      strategy:
        runOnce:
          deploy:
            steps:

            - task: DownloadPackage@1
              displayName: DownloadArtifacts
              inputs:
                packageType: 'nuget'
                feed: '$(artifactFeed)'
                definition: '$(artifactDefinition)'
                version: '$(artifactVersion)'
                extract: true
                downloadPath: '$(System.ArtifactsDirectory)'

            - template: templates/steps-tasks/deploy-ResourceGroup.yml
              parameters:
                serviceId: ${{ parameters.landingZoneServiceId }}
                serviceName: $(subscriptionServiceName)
                deploymentType: '$(deploymentType)'
                serviceConnection: '$(landingZoneServiceConnection)'
                landingZoneType: '$(landingZoneType)'

  # Deploy Resource Groups Locks
  - stage: DeployResourceGroupLocks
    displayName: DeployResourceGroupLocks

    variables:
    - group: var-azure-platform
    - group: var-service-principle-secrets
    - group: lz-var-service-principle-secrets

    pool:
      vmImage: windows-latest

    dependsOn: [ DeployResourceGroup ]
    jobs:
    - deployment: DeployResourceGroupLocks
      workspace:
        clean: all

      environment: $(AzureDevOpsEnvironments)
      strategy:
        runOnce:
          deploy:
            steps:

            - task: DownloadPackage@1
              displayName: DownloadArtifacts
              inputs:
                packageType: 'nuget'
                feed: '$(artifactFeed)'
                definition: '$(artifactDefinition)'
                version: '$(artifactVersion)'
                extract: true
                downloadPath: '$(System.ArtifactsDirectory)'

            - template: templates/steps-tasks/deploy-ResourceGroupLock.yml
              parameters:
                serviceId: ${{ parameters.landingZoneServiceId }}
                serviceName: $(subscriptionServiceName)
                deploymentType: '$(deploymentType)'
                serviceConnection: '$(landingZoneServiceConnection)'
                landingZoneType: '$(landingZoneType)'