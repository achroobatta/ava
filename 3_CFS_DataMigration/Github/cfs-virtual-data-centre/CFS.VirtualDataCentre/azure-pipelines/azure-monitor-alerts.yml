trigger: none # will disable CI builds entirely

pr: none # will disable PR builds entirely; will not disable CI triggers


## If we want to read from trunk branch directly not using artifact version packages
#resources:
#  repositories:
#  - repository: cfsnp
#    type: github
#    name: cfsnp/cfs-virtual-data-centre
#    endpoint: cfsnp

parameters:
  - name: deployEnvironment
    displayName: Target Deployment Environment
    type: string
    default: "Non-Production"
    values:
     - "Non-Production"
     - "Production"

  - name: artifactVersion
    displayName: Artifact/Package Version (e.g. "latest" or "0.0.0.256" or "1.0.0.1")
    type: string
    default: "latest"

  - name: isDayLightSavings
    displayName: Enable DayLight Savings Time
    type: boolean
    default: false
    values:
     - false
     - true
     
  - name: deployLocation
    displayName: Target Deployment Location Abbreviation
    type: string
    default: ""
    values:
     - "edc"
     - "sdc"

variables:

 - group: var-service-principle-secrets
 - group: var-azure-tenant-id

 #workspaces are in edc only
 - name: workspaceLocationPrefix
   value: "edc"

 # Artifact Package Feed Value
 - name: artifactFeed
 
   # deployment to Production environment must use the main branch for the pipeline yaml
   ${{ if and( eq(parameters.deployEnvironment, 'Production'), eq(variables['Build.SourceBranch'], 'refs/heads/main') ) }}:
    value: "core-it/cfs-infra-release"
   # deployment to Non-Production environment can be from the develop or a feature branch for the pipeline yaml
   ${{ elseif and( eq(parameters.deployEnvironment, 'Non-Production'), eq(variables['Build.SourceBranch'], 'refs/heads/develop') ) }}:
    value: "core-it/cfs-infra-ci"
   # deployment to Non-Production environment can be from the develop or a feature branch for the pipeline yaml
   # allow deployment to non-production from a feature branch, using the PR build (a PR needs to be raised on the feature branch, and wait for it to finish building a deployment artifact).
   ${{ elseif and( eq(parameters.deployEnvironment, 'Non-Production'), startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/') ) }}:
    value: "core-it/cfs-infra-pr-develop"
   #branch and/or deployEnvironment are not valid -> do not pull any artifact, just let the pipeline error out
   ${{ else }}:
    value: ""

 # Artifact Package Definition Value
 - name: artifactDefinition
   value: "CFS.VirtualDataCentre"

 # Artifact Package Version Value
 - name: artifactVersion
   value: ${{ parameters.artifactVersion }}

 # Azure DevOps Environments
 - name: AzureDevOpsEnvironments
   value: ${{ parameters.deployEnvironment }}

 # Azure DevOps Service Connection Name
 - name: AzureEnvironmentPrefix
   ${{ if eq(parameters.deployEnvironment, 'Non-Production') }}:
     value: "np"
   ${{ if eq(parameters.deployEnvironment, 'Production') }}:
     value: "prd"

 # Azure DevOps Security Service Connection Name
 - name: securitySubscServiceConnection
   ${{ if eq(parameters.deployEnvironment, 'Non-Production') }}:
     value: "sc-subsc-np-security-001"
   ${{ if eq(parameters.deployEnvironment, 'Production') }}:
     value: "sc-subsc-prd-security-001"

 # Deployment Location
 - name: deploymentLocation_var
   ${{ if eq(parameters.deployLocation, 'edc') }}:
     value: "australiaeast"
   ${{ if eq(parameters.deployLocation, 'sdc') }}:
     value: "australiaeasoutheast"  

 # Azure DevOps AustraliaEastOffsetSymbol
 - name: AustraliaEastOffsetSymbol
   ${{ if eq(parameters.isDayLightSavings, true) }}:
     value: "PT11H"
   ${{ else }}:
     value: "PT10H"

 # Azure OwnerÂ 
 - name: Owner
   value: "Robert Reakes"

 # Azure Cost Center Code
 - name: costCenterCode
   value: "4010"

 # Azure CLI Deployment Names Dynamically Applied Per Stage
 - name: deploymentName
   value: '$(System.StageDisplayName)_$(Build.BuildNumber)'

 # Azure Resource Location
 - name: resourceLocation
   value: "australiaeast"

stages:

  # Deploy Activity Log Alert Rules
  - stage: DeployActivityLogAlertRules
    displayName: DeployActivityLogAlertRules

    variables:
    - group: var-azure-platform
    - group: var-service-principle-secrets

    pool:
      vmImage: windows-latest

    dependsOn: []
    jobs:
    - deployment: DeployActivityLogAlertRules
      workspace:
        clean: all

      environment: $(AzureDevOpsEnvironments)
      strategy:
        runOnce:
          deploy:
            steps:

            - task: DownloadPackage@1
              displayName: DownloadArtifacts
              inputs:
                packageType: 'nuget'
                feed: '$(artifactFeed)'
                definition: '$(artifactDefinition)'
                version: '$(artifactVersion)'
                extract: true
                downloadPath: '$(System.ArtifactsDirectory)'

            - task: AzureCLI@2
              displayName: Build Activity Log Alert Rules
              inputs:
                azureSubscription: $(securitySubscServiceConnection)
                scriptType: 'pscore'
                scriptLocation: 'inlineScript'
                inlineScript: az deployment group create `
                              --resource-group rg-$(AzureEnvironmentPrefix)-$(workspaceLocationPrefix)-sec-sec-001 `
                              --name $(deploymentName) `
                              --template-file $(System.ArtifactsDirectory)\$(deployments)\deployment-templates\deploy-ActivityLogAlerts.bicep `
                              --parameters environmentPrefix='$(AzureEnvironmentPrefix)' `
                              --parameters owner='$(Owner)' `
                              --parameters costCenter='$(costCenterCode)' `
                              --parameters appName='ActivityLogAlert' `
                              --parameters australiaEastOffsetSymbol='$(AustraliaEastOffsetSymbol)' `
                              --parameters $(System.ArtifactsDirectory)\$(deployments)\04-Monitoring\parameter-files\activityLogAlerts\activityLogAlerts.param.$(AzureEnvironmentPrefix).json

  # Deploy Scheduled Query Rules
  - stage: ScheduledQueryRules
    displayName: ScheduledQueryRules

    variables:
    - group: var-azure-platform
    - group: var-service-principle-secrets

    pool:
      vmImage: windows-latest

    dependsOn: []
    jobs:
    - deployment: ScheduledQueryRules
      workspace:
        clean: all

      environment: $(AzureDevOpsEnvironments)
      strategy:
        runOnce:
          deploy:
            steps:

            - task: DownloadPackage@1
              displayName: DownloadArtifacts
              inputs:
                packageType: 'nuget'
                feed: '$(artifactFeed)'
                definition: '$(artifactDefinition)'
                version: '$(artifactVersion)'
                extract: true
                downloadPath: '$(System.ArtifactsDirectory)'

            - task: AzureCLI@2
              displayName: Build Scheduled Query Rules
              inputs:
                azureSubscription: $(securitySubscServiceConnection)
                scriptType: 'pscore'
                scriptLocation: 'inlineScript'
                inlineScript: az deployment group create `
                              --resource-group rg-$(AzureEnvironmentPrefix)-$(workspaceLocationPrefix)-sec-sec-001 `
                              --name $(deploymentName) `
                              --parameters location='$(deploymentLocation_var)' `
                              --template-file $(System.ArtifactsDirectory)\$(deployments)\deployment-templates\deploy-ScheduledQueryRules.bicep `
                              --parameters $(System.ArtifactsDirectory)\$(deployments)\04-Monitoring\parameter-files\scheduledQueryRules\scheduledQueryRules-edc.param.$(AzureEnvironmentPrefix).json
