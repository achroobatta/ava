trigger: none # will disable CI builds entirely

pr: none # will disable PR builds entirely; will not disable CI triggers

parameters:
  - name: deployEnvironment
    displayName: Target Deployment Environment
    type: string
    default: "Non-Production"
    values:
     - "Non-Production"
     - "Production"

  - name: artifactVersion
    displayName: Artifact/Package Version (e.g. "latest" or "0.0.0.256" or "1.0.0.1")
    type: string
    default: "latest"

  - name: landingZoneServiceId
    displayName: Landing Zone Service Id - case sensitive when matching suffix of the Nuget Package Name (e.g. "FWD" or "fwp" or "fcp" or "bkof")
    type: string
    default: "BKOF"

  - name: resourceLocation
    displayName: Location of the resources (australiaeast or australiasoutheast)
    type: string
    default: "australiaeast"
    values:
    - "australiaeast"
    - "australiasoutheast"

  - name: peNametobeDeleted
    displayName: Name of PE Resource. 'na' means nothing to delete. {Adhoc Step to delete Existing resource}. Select dnsName and Storage Account, if you want to delete entry from Connectivity Private DNSZone
    type: string
    default: "na"

  - name: dnsNametobeDeleted
    displayName: Name of DNS Resource. 'na' means nothing to delete. {Adhoc Step to delete Existing resource}
    type: string
    default: "na"
    values:
     - "na"
     - "privatelink.vaultcore.azure.net"
     - "privatelink.blob.core.windows.net"

  - name: destStorageAccountName
    displayName: Name of Storage Account Resource. 'na' means nothing to create. {Adhoc Step to create PE and A record for this Resource}
    type: string
    default: 'na'

  # - name: dnsZoneName
  #   displayName: Name of DNS Zone. {Private DNS Zone in hub related to Adhoc step above}
  #   type: string
  #   default: 'privatelink.blob.core.windows.net'
  #   values:
  #    - 'privatelink.vaultcore.azure.net'
  #    - 'privatelink.blob.core.windows.net'

  - name: isDayLightSavings
    displayName: Enable DayLight Savings Time
    type: boolean
    default: false
    values:
     - false
     - true

  - name: useWhatIfDeploymentType
    displayName: What-If Deployment
    type: boolean
    default: true
    values:
     - false
     - true

variables:

 - group: var-azure-tenant-id
 - group: lz-var-service-principle-secrets
 - group: var-service-principle-secrets

 - name: azureTenantId
   ${{ if eq(parameters.deployEnvironment, 'Non-Production') }}:
     value: '$(np-azure-tenant-id)'
   ${{ else }}:
     value: '$(prd-azure-tenant-id)'

 # Artifact Package Feed Value
 - name: artifactFeed
   # deployment to Production environment must use the main branch for the pipeline yaml
   ${{ if and( eq(parameters.deployEnvironment, 'Production'), eq(variables['Build.SourceBranch'], 'refs/heads/main') ) }}:
    value: "core-it/cfs-infra-release"
   # deployment to Non-Production environment can be from the develop or a feature branch for the pipeline yaml
   ${{ elseif and( eq(parameters.deployEnvironment, 'Non-Production'), eq(variables['Build.SourceBranch'], 'refs/heads/develop') ) }}:
    value: "core-it/cfs-infra-ci"
   # deployment to Non-Production environment can be from the develop or a feature branch for the pipeline yaml
   # allow deployment to non-production from a feature branch, using the PR build (a PR needs to be raised on the feature branch, and wait for it to finish building a deployment artifact).
   ${{ elseif and( eq(parameters.deployEnvironment, 'Non-Production'), startsWith(variables['Build.SourceBranch'], 'refs/heads/feature/') ) }}:
    value: "core-it/cfs-infra-pr-develop"
   #branch and/or deployEnvironment are not valid -> do not pull any artifact, just let the pipeline error out
   ${{ else }}:
    value: ""

 # Artifact Package Definition Value
 - name: artifactDefinition
   value: CFS.Core.${{ parameters.landingZoneServiceId }}

 # Artifact Package Version Value
 - name: artifactVersion
   value: ${{ parameters.artifactVersion }}

 # Azure DevOps Environments
 - name: AzureDevOpsEnvironments
   value: ${{ parameters.deployEnvironment }}

 # Azure DevOps Environment Prefix
 - name: AzureEnvironmentPrefix
   ${{ if eq(parameters.deployEnvironment, 'Non-Production') }}:
      value: "np"
   ${{ if eq(parameters.deployEnvironment, 'Production') }}:
      value: "prd"

 - name: resourceLocationPrefix
   ${{ if eq(parameters.resourceLocation, 'australiaeast') }}:
     value: edc
   ${{ else }}:
     value: sdc

 - name: principalId
   ${{ if eq(parameters.deployEnvironment, 'Non-Production') }}:
    value: '89914055-a1ca-4256-a10e-d35d1a5e8912'
   ${{ else }}:
    value: '336ec514-ed8f-47bc-98cb-75eeeb0f480e'

 - name: vmName
   ${{ if eq(parameters.deployEnvironment, 'Non-Production') }}:
    value: 'VMNPEDCADOW001'
   ${{ else }}:
    value: 'VMPRDEDCADOW001'

 - name: landingZoneServiceIdsm
   ${{ if eq(parameters.landingZoneServiceId, 'BKOF') }}:
    value: 'bkof'
   ${{ else }}:
    value: ${{ parameters.landingZoneServiceId }}

 - name: vmRG
   value: 'rg-$(AzureEnvironmentPrefix)-$(resourceLocationPrefix)-$(landingZoneServiceIdsm)-dm-vm-001'

 - name: kvRG
   value: 'rg-$(AzureEnvironmentPrefix)-$(resourceLocationPrefix)-$(landingZoneServiceIdsm)-dm-001'

 - name: keyVaultNameforSecret
   ${{ if eq(parameters.deployEnvironment, 'Non-Production') }}:
     value: "kv-np-edc-bkof-dm-0028"
   ${{ if eq(parameters.deployEnvironment, 'Production') }}:
     value: "kv-prd-edc-bkof-dm-0025"

 - name: operationSubscriptionId
   ${{ if eq(parameters.deployEnvironment, 'Non-Production') }}:
    value: '$(subsc-np-operations-sid)'
   ${{ else }}:
    value: '$(subsc-prd-operations-sid)'

 - name: operationsServiceConnection
   ${{ if eq(parameters.deployEnvironment, 'Non-Production') }}:
    value: 'sc-subsc-np-operations-001'
   ${{ else }}:
    value: 'sc-subsc-prd-operations-001'

 - name: subId
   ${{ if eq(parameters.deployEnvironment, 'Non-Production') }}:
     value: '$(subsc-np-backoffice-sid)'
   ${{ if eq(parameters.deployEnvironment, 'Production') }}:
     value: '$(subsc-prd-backoffice-sid)'

 - name: connSubId
   ${{ if eq(parameters.deployEnvironment, 'Non-Production') }}:
     value: '$(subsc-np-connectivity-sid)'
   ${{ if eq(parameters.deployEnvironment, 'Production') }}:
     value: '$(subsc-prd-connectivity-sid)'

  # Deployment Type
 - name: deploymentType
   ${{ if eq(parameters.useWhatIfDeploymentType, true) }}:
    value: "what-if"
   ${{ else }}:
    value: "create"

 - name: bkofSubscriptionID
   ${{ if eq(parameters.deployEnvironment, 'Non-Production') }}:
    value: $(subsc-np-backoffice-sid)
   ${{ else }}:
    value: $(subsc-prd-backoffice-sid)

 #  Landing Zone Subscription ID
 - name: landingZoneSubscriptionID
   ${{ if eq(parameters.deployEnvironment, 'Non-Production') }}:
     ${{ if contains(parameters.landingZoneServiceId, 'BKOF' ) }}:
       value: $(subsc-np-backoffice-sid)
     ${{ else }}:
       value: $(subsc-np-${{ parameters.landingZoneServiceId }}-sid)
   ${{ if eq(parameters.deployEnvironment, 'Production') }}:
     ${{ if contains(parameters.landingZoneServiceId, 'BKOF' ) }}:
       value: $(subsc-prd-backoffice-sid)
     ${{ else }}:
       value: $(subsc-prd-${{ parameters.landingZoneServiceId }}-sid)

#securitySubscriptionId
 - name: securitySubscriptionId
   ${{ if eq(parameters.deployEnvironment, 'Non-Production') }}:
      value: $(subsc-np-security-sid)
   ${{ if eq(parameters.deployEnvironment, 'Production') }}:
      value: $(subsc-prd-security-sid)

 # Azure DevOps Landing Zone Service Connection Name
 - name: landingZoneServiceConnection
   ${{ if eq(parameters.deployEnvironment, 'Non-Production') }}:
      ${{ if eq(parameters.landingZoneServiceId, 'BKOF')}}:
        value: "sc-subsc-np-bkof-001"
      ${{ else }}:
        value: "sc-subsc-np-${{ parameters.landingZoneServiceId }}-001"
   ${{ if eq(parameters.deployEnvironment, 'Production') }}:
      ${{ if eq(parameters.landingZoneServiceId, 'BKOF')}}:
        value: "sc-subsc-prd-bkof-001"
      ${{ else }}:
        value: "sc-subsc-prd-${{ parameters.landingZoneServiceId }}-001"

 #workspaces are in edc only
 - name: workspaceLocationPrefix
   ${{ if eq(parameters.resourceLocation, 'australiaeast') }}:
    value: "edc"
   ${{ else }}:
    value: "sdc"

 - name: virtualEnvironmentName
   ${{ if eq(parameters.deployEnvironment, 'Non-Production') }}:
    value: "bkof-dm-np"
   ${{ if eq(parameters.deployEnvironment, 'Production') }}:
    value: "bkof-dm-prd"

 - name: connRg
   value: 'rg-$(AzureEnvironmentPrefix)-$(workspaceLocationPrefix)-hub-netw-001'

 - name: rgName
   ${{ if eq(parameters.landingZoneServiceId, 'BKOF') }}:
      value: 'rg-$(AzureEnvironmentPrefix)-$(workspaceLocationPrefix)-bkof-dm-001'
   ${{ else }}:
      value: 'rg-$(AzureEnvironmentPrefix)-$(workspaceLocationPrefix)-$(landingZoneServiceIdsm)-dm-001'
#  - name: templateDirectory
#    value: '$(System.DefaultWorkingDirectory)\CFS.VirtualDataCentre\bicep-templates\deployment'

  # Parameter Directory
 - name: parameterDirectory
   value: '$(System.ArtifactsDirectory)\content\parameter-files\$(virtualEnvironmentName)'

 # Subscription Service Name
 - name: subscriptionServiceName
   value: "CFSCO Management Group"

 # Azure DevOps AustraliaEastOffsetSymbol
 - name: AustraliaEastOffsetSymbol
   ${{ if eq(parameters.isDayLightSavings, true) }}:
     value: "PT11H"
   ${{ else }}:
     value: "PT10H"

 # Azure OwnerÂ 
 - name: owner
   value: "Robert Reakes"

 # Azure Cost Center Code
 - name: costCenterCode
   value: "4010"

  # Azure Cost Center Code
 - name: appName
   value: "infra"

 # Azure CLI Deployment Names Dynamically Applied Per Stage
 - name: deploymentName
   value: '$(System.StageDisplayName)_$(Build.BuildNumber)'

 - name: resourceLocation
   value: ${{ parameters.resourceLocation }}

 - name: peNametobeDeleted
   value: ${{ parameters.peNametobeDeleted }}

 - name: dnsNametobeDeleted
   value: ${{ parameters.dnsNametobeDeleted }}

 - name: destStorageAccountName
   value: ${{ parameters.destStorageAccountName }}

stages:

# Remove Resouces in existing DNS Zone
  - stage: removePE
    displayName: RemovePE
    pool:
      vmImage: windows-latest
    dependsOn: []
    jobs:
    - job: RemovePE
      workspace:
        clean: all

      # environment: $(AzureDevOpsEnvironments)
      # strategy:
      #   runOnce:
      #     deploy:
      steps:
            - task: DownloadPackage@1
              displayName: DownloadArtifacts
              inputs:
                packageType: 'nuget'
                feed: '$(artifactFeed)'
                definition: '$(artifactDefinition)'
                version: '$(artifactVersion)'
                extract: true
                downloadPath: '$(System.ArtifactsDirectory)'

            #Delete PE
            - template: templates/remove-ResourcePE.yml
              parameters:
                serviceConnection: '$(landingZoneServiceConnection)'
                resourceLocation: '$(resourceLocation)'
                rgName: '$(rgName)'
                subId: '$(subId)'
                peNametobeDeleted: '$(peNametobeDeleted)'
                connSubId: '$(connSubId)'
                connRg: '$(connRg)'
                destStorageAccountName: '$(destStorageAccountName)'
                dnsNametobeDeleted: '$(dnsNametobeDeleted)'

# Remove Resouces in existing DNS Zone
  - stage: removeDNS
    displayName: RemoveDNS
    pool:
      vmImage: windows-latest
    dependsOn: []
    jobs:
    - job: RemoveDNS
      workspace:
        clean: all

      # environment: $(AzureDevOpsEnvironments)
      # strategy:
      #   runOnce:
      #     deploy:
      steps:
            - task: DownloadPackage@1
              displayName: DownloadArtifacts
              inputs:
                packageType: 'nuget'
                feed: '$(artifactFeed)'
                definition: '$(artifactDefinition)'
                version: '$(artifactVersion)'
                extract: true
                downloadPath: '$(System.ArtifactsDirectory)'

            #Delete PE
            - template: templates/remove-ResourceDNS.yml
              parameters:
                serviceConnection: '$(landingZoneServiceConnection)'
                resourceLocation: '$(resourceLocation)'
                rgName: '$(rgName)'
                subId: '$(subId)'
                dnsNametobeDeleted: '$(dnsNametobeDeleted)'

# Add Adhoc PE in existing DNS Zone
  - stage: adhocPEAddDatalake
    displayName: AdhocPEAddDatalake
    pool:
      vmImage: windows-latest
    dependsOn: []
    jobs:
    - job: AdhocPEAddDatalake
      workspace:
        clean: all

      # environment: $(AzureDevOpsEnvironments)
      # strategy:
      #   runOnce:
      #     deploy:
      steps:
            - task: DownloadPackage@1
              displayName: DownloadArtifacts
              inputs:
                packageType: 'nuget'
                feed: '$(artifactFeed)'
                definition: '$(artifactDefinition)'
                version: '$(artifactVersion)'
                extract: true
                downloadPath: '$(System.ArtifactsDirectory)'

            #Delete PE
            - template: 'templates/deploy-AdhocPrivateEndpointDL.yml'
              parameters:
                serviceName: '$(subscriptionServiceName)'
                serviceConnection: '$(landingZoneServiceConnection)'
                deploymentType: '$(deploymentType)'
                serviceId: '$(landingZoneServiceIdsm)'
                resourceLocation: '$(resourceLocation)'
                deploymentName: '$(deploymentName)'
                owner: '$(owner)'
                costCenterCode: '$(costCenterCode)'
                appName: '$(appName)'
                AustraliaEastOffsetSymbol: '$(AustraliaEastOffsetSymbol)'
                AzureEnvironmentPrefix: '$(AzureEnvironmentPrefix)'
                destStorageAccountName: '$(destStorageAccountName)'
                rgName: '$(rgName)'
                connRg: '$(connRg)'
                subId: '$(subId)'
                connSubId: '$(connSubId)'

# Add Adhoc PE in existing DNS Zone
  - stage: adhocPEAddSftp
    displayName: AdhocPEAddSftp
    pool:
      vmImage: windows-latest
    dependsOn: []
    jobs:
    - job: AdhocPEAddSftp
      workspace:
        clean: all

      # environment: $(AzureDevOpsEnvironments)
      # strategy:
      #   runOnce:
      #     deploy:
      steps:
            - task: DownloadPackage@1
              displayName: DownloadArtifacts
              inputs:
                packageType: 'nuget'
                feed: '$(artifactFeed)'
                definition: '$(artifactDefinition)'
                version: '$(artifactVersion)'
                extract: true
                downloadPath: '$(System.ArtifactsDirectory)'

            #Delete PE
            - template: 'templates/deploy-AdhocPrivateEndpointSftp.yml'
              parameters:
                serviceName: '$(subscriptionServiceName)'
                serviceConnection: '$(landingZoneServiceConnection)'
                deploymentType: '$(deploymentType)'
                serviceId: '$(landingZoneServiceIdsm)'
                resourceLocation: '$(resourceLocation)'
                deploymentName: '$(deploymentName)'
                owner: '$(owner)'
                costCenterCode: '$(costCenterCode)'
                appName: '$(appName)'
                AustraliaEastOffsetSymbol: '$(AustraliaEastOffsetSymbol)'
                AzureEnvironmentPrefix: '$(AzureEnvironmentPrefix)'
                destStorageAccountName: '$(destStorageAccountName)'
                rgName: '$(rgName)'
                connRg: '$(connRg)'
                subId: '$(subId)'
                connSubId: '$(connSubId)'