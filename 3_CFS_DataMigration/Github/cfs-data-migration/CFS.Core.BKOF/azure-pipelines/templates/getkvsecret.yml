parameters:
    name: ''
    displayName: ''
    agentPool: ''
    continueOnError: ''
    dependsOn: ''
    landingZoneServiceConnection: ''
    zipFileSecretName: ''
    keyVaultNameforSecret: ''
    vmName: ''
    serviceAccountP: ''
    serviceAccountU: ''
    serviceAccountUE: ''
    tenantId: ''
    subId: ''

jobs:
- job: ${{ parameters.name }}
  displayName: ${{ parameters.displayName}}
  pool:
    name: ${{ parameters.agentPool}}
  continueOnError: ${{ parameters.continueOnError}}
  dependsOn: ${{ parameters.dependsOn}}

  steps:
  - task: PowerShell@2
    displayName: Get KV Secret
    name: get_kv_secret_value
    inputs:
      targetType: 'inline'
      script: |
        $computervm = '${{parameters.vmName}}'
        echo '******************************************************************'
        echo 'Computer Name: ' $computervm
        echo '******************************************************************'
        $User = '${{parameters.serviceAccountUE}}'
        $Password = ConvertTo-SecureString -String '${{parameters.serviceAccountP}}' -AsPlainText -Force
        echo $User
        echo $Password
        $Credential = [pscredential]::new($User,$Password)
        $ToSession = New-PSSession -ComputerName "$computervm" -Credential $Credential
        $getKvSecret = Invoke-Command -Session $ToSession -FilePath "$(System.DefaultWorkingDirectory)\CFS.Core.BKOF\scripts\GetKeyVaultSecret.ps1" -ArgumentList "${{ parameters.keyVaultNameforSecret}}","${{ parameters.zipFileSecretName}}","${{parameters.tenantId}}","${{parameters.subId}}"
        $getKvSecret
        if($getKvSecret -contains "Error in getting secret value")
        {
          Write-Error "Error in getting secret value"
        }
        else
        {
          $secretValue = ($getKvSecret | ConvertTo-Json) | ConvertFrom-Json
          $secretValue
          $kvValue = $secretValue[2].value
          $kvValue
          Write-Output "##vso[task.setvariable variable=KvSecretValue;isOutput=true]$kvValue"
        }
